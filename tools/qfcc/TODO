o = todo
X = done
? = maybe but not likely
M = more testing
I = in progress
W = waiting on other work

X	native integer type
X	?: operator
X	<op>= operator ( var += expr, etc. )
X	allow temp defs at higher levels
X	move the chained function support out of emit_function_expr into
	function_expr
X	pre- and post- increment operators (++ and --)
X	break/continue keywords for switch() and for(;;)
X	full scoping
X	gut out old parser
X	switch/case, for any type
X	warn for local shadowing parameter
X	clean up error expression handling to minimize follow on errors
X	object oriented features ala Objective-C
X	short circuit logic for && and || (optional?)
X	quaternion type. Tricky: requires 4 word args/return
X	pass the first two parms in call->b and call->c
X	CSE optimizations. Hard?
o	fix local structure used/uninitialized warnings
o	arrays in entities/structures?
o	try to reduce memory consumption
o	unnamed function parameters for prototypes/typdefs etc.
o	embedded nul characters in strings
o	smarter temp def handling
o	C style pointer/array declarations (type system in general?)
o	better error handling to continue parsing after a syntax error
?	"":"" string concatenation (parser issues)
